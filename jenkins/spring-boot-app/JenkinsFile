pipeline {

  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {

stage('clean') {
      steps {
        sh 'ls -ltr'
        sh 'cd jenkins/spring-boot-app && mvn clean'
      }
    }

stage('Fix Permissions') {
  steps {
    echo 'Fixing permissions for Jenkins workspace files'
   //  sh 'cd jenkins/spring-boot-app && chmod -R 777 target'
   // sh 'chmod -R 777 ${WORKSPACE}'
  //  sh "chmod -R 777 ${WORKSPACE}/jenkins/spring-boot-app/target"
  }
}
   stage('Clean Workspace') {
     steps {
        echo "Cleaning workspace"
    //   sh 'rm -rf ${WORKSPACE}/*'        
       // sh 'cd jenkins/spring-boot-app && rm -rf target/*'
       // sh 'rm -rf ${WORKSPACE}/jenkins/spring-boot-app/target/*'
    //    sh 'git clean -fdx'
   //     deleteDir()  // This will delete everything in the workspace
    //    sh "rm -rf ${WORKSPACE}/.git"  
      }
   }

    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'master', url: 'https://github.com/Rekapost/java-maven-sonar-argocd-helm-k8s.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd jenkins/spring-boot-app && mvn clean package'
      }
    }

stage('Static Code Analysis') {
      environment {
       SONAR_URL = "http:44.202.207.224:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
        // sh 'cd ${WORKSPACE}/jenkins/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        sh 'cd jenkins/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "reka83/ultimate-cicd-pipeline:${BUILD_NUMBER}"
        //DOCKERFILE_LOCATION = "jenkins/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd jenkins/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            // Building the Docker image with the specified Dockerfile
            //sh "cd ${WORKSPACE}/jenkins/spring-boot-app && docker build -t ${DOCKER_IMAGE} -f ${DOCKERFILE_LOCATION} ."
            // Pushing the Docker image to Docker Hub
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
   stage('Update Deployment File') {
    environment {
        GIT_REPO_NAME = "java-maven-sonar-argocd-helm-k8s"
        GIT_USER_NAME = "Rekapost"
    }
    steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
                git config user.email "rekaharisri@gmail.com"
                git config user.name "Reka"
                # Ensure you are in the correct repository directory
                # cd ${WORKSPACE}/${GIT_REPO_NAME}
                # Get the current build number for replacement
                BUILD_NUMBER=${BUILD_NUMBER}
                # Use sed to update the deployment file with the build number
                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" jenkins/spring-boot-app-manifests/deployment.yml
                # Stage the changes for commit
                git add jenkins/spring-boot-app-manifests/deployment.yml
                # Commit the changes
                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                # Push the changes back to the remote repository
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:master
           else
                echo "No changes to commit."
            fi

'''
        }
    }
}

  }
}
